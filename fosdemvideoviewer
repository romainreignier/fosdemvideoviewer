#!/bin/sh

# Exit on error or Ctrl+C
set -e

# from ytfzf
command_exists () {
    command -v "$1" > /dev/null 2>&1
}

die () {
    _return_status=$1
    printf "$2" >&2
    exit "$_return_status"
}

# Check dependencies
for dep in curl fzf mpv; do
    command_exists "$dep" || die 3 "$dep is a required dependency, please install it\n"
done

# On Ubuntu, xmlstarlet is installed as 'xmlstarlet' while as 'xml' on Alpine
XML_CMD="xml"
if ! command_exists "$XML_CMD"; then
    XML_CMD="xmlstarlet"
    if ! command_exists "$XML_CMD"; then
        die 3 "xmlstarlet is a required dependency, please install it\n"
    fi
fi

# Generate FOSDEM years list
start_year=2012
current_year=$(date +%Y)
current_month=$(date +%m)
# Check if FOSDEM happened this year
if [ "$current_month" -lt 2 ]; then
    current_year=$((current_year - 1))
fi
year=$start_year
selected_year=$(while [ "$year" -le "$current_year" ]; do echo "$year"; year=$((year + 1)); done | fzf --reverse --prompt="Year:")
echo "Selected Year: $selected_year"

# Download the schedule
# the sed allows to convert \ to \\ in XML to avoid shell expansion of escape character
schedule_xml=$(curl -s -L --compressed https://fosdem.org/"$selected_year"/schedule/xml | sed 's/\\/\\\\/g')

echo "Schedule downloaded"

selected_track=$(echo "$schedule_xml" | $XML_CMD sel -t -v "//track" | sort -u | fzf --reverse --prompt="Track:")
echo "Selected track: $selected_track"

selected_talk=$(echo "$schedule_xml" | $XML_CMD sel -t -m "//event[track=\"$selected_track\"]" -v title -n | fzf --reverse --prompt="Talk:")
echo "Selected talk: $selected_talk"

video_link=$(echo "$schedule_xml" | $XML_CMD sel -t -m "//event[title=\"$selected_talk\"]/links/link[contains(@href, \"webm\")]" -v @href)
echo "Video link: $video_link"

mpv "$video_link"
